"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const prisma_1 = __importDefault(require("../lib/prisma"));
const router = express_1.default.Router();
// üì§ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞
router.post("/add", async (req, res) => {
    try {
        const { name, position, text } = req.body;
        if (!name || !position || !text) {
            return res.status(400).json({ success: false, message: "–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
        }
        const review = await prisma_1.default.review.create({
            data: { name, position, text },
        });
        res.json({ success: true, review });
    }
    catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞:", error);
        res.status(500).json({ success: false, message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
});
// üì• –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –æ—Ç–∑—ã–≤—ã
router.get("/", async (_req, res) => {
    try {
        const reviews = await prisma_1.default.review.findMany({ orderBy: { createdAt: "desc" } });
        res.json({ success: true, reviews });
    }
    catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–æ–≤:", error);
        res.status(500).json({ success: false });
    }
});
// üóë –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞
router.delete("/:id", async (req, res) => {
    const { id } = req.params;
    try {
        await prisma_1.default.review.delete({
            where: { id },
        });
        res.json({ success: true });
    }
    catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞:", error);
        res.status(500).json({ success: false, message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
});
// ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞
router.put("/:id", async (req, res) => {
    const { id } = req.params;
    const { name, position, text } = req.body;
    if (!name || !position || !text) {
        return res.status(400).json({ success: false, message: "–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
    }
    try {
        const updated = await prisma_1.default.review.update({
            where: { id },
            data: { name, position, text },
        });
        res.json({ success: true, review: updated });
    }
    catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞:", error);
        res.status(500).json({ success: false, message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
});
exports.default = router;
